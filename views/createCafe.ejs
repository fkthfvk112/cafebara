<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/stylesheets/cafe.css">

    <title>카페 만들기</title>
</head>
<body>
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=36ae5291fff272f636c29f53ee0e5ad5&libraries=services,clusterer"></script>
    <!--수정 api값 숨기기-->
    <% layout('layouts/boilerplate') %>

    <div class="container mb-3" style="margin-top: 10em;">
        <div class="row justify-content-md-center text-center">
            <h1 class="my-3"> 카페 생성 페이지</h1>
            <div class="card" style="width: 30rem;">
                <form action="/cafe" class="needs-validation" method="POST" enctype="multipart/form-data" novalidate>
                <div class="card-body">

                <h5 class="card-title">카페 항목 생성</h5>
                <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <div class="row text-center">
                        <label style="display: block;" for="cafeNameInput">카페 이름</label>
                        <input id="cafeNameInput" class="form-control" data-bs-toggle="modal" data-bs-target="#locationModal"  type="text" name="cafe[name]"  required> <!-- name속성 : 서버로 전달되는 이름-->
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="row text-center mb-3">
                        <label style="display: block;" for="cafeLocationInput">카페 위치</label>
                        <input id="cafeLocationInput" class="form-control" data-bs-toggle="modal" data-bs-target="#locationModal" type="text" name="cafe[location]"  required>
                        <input id="inputLatitude" style="display: none;" name="cafe[latitude]" readonly><!--위도 저장-->
                        <input id="inputlongitude" style="display: none;" name="cafe[longitude]" readonly><!--경도 저장-->
                        <div class='mt-3' id="map" style="width:100%;height:10rem;"></div>

                    </div>
                </li>
                <li class="list-group-item">
                    <div class=" flex-column mb-3">
                        <h5>설명</h5>
                        <textarea class="form-control" placeholder="카페 특징, 장점, 단점 등&#10;(최대 80자)" name="cafe[description]" id="" cols="40" rows="7" maxlength="80" required></textarea>
                    </div>
                </li>   
                <li class="list-group-item d-flex flex-column">
                    <h5>대표 메뉴</h5>
                    <input class="form-control" id ='repre0' type="text" style="margin-bottom: 3px;" required>
                    <input class="form-control" id ='repre1' type="text" style="margin-bottom: 3px;" required>
                    <input class="form-control" id ='repre2' type="text" style="margin-bottom: 3px;" required>
                    <div>
                        <button id="repMenuBtn" class="btn btn-primary btn-sm mx-3">확인</button>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="d-flex justify-content-center mb-3">
                        <div id ="menus" class="row">
                            <div class="row mb-3 menuBackground">
                                <label class="form-label text-start">대표메뉴1</label>
                                <input class=' menuName0 form-control mb-1' id="menuName" type="text" name="repreMenu[name]" style="margin-bottom: 3px; background-color: #edede9;" readonly required>
                                <label class="form-label text-start">가격</label>
                                <input class='form-control mb-3' id='price' placeholder = '₩' type="number" name="repreMenu[price]" style="margin-bottom: 3px;" required>
                                <textarea class="form-control mb-1" name="repreMenu[description]" placeholder="메뉴 설명을 입력해주세요." required></textarea>
                                <input  class="form-control mb-3" name="repreMenuPhoto" type="file" required>
                            </div>
                            <div class="row mb-3 menuBackground">
                                <label class="form-label text-start">대표메뉴2</label>
                                <input class='menuName1 form-control mb-1' id="menuName" type="text" name="repreMenu[name]" style="margin-bottom: 3px;background-color: #edede9;" readonly required>
                                <label class="form-label text-start">가격</label>
                                <input class='form-control mb-3' id='price' placeholder = '₩' type="number" name="repreMenu[price]" style="margin-bottom: 3px;" required>
                                <textarea class="form-control mb-1" name="repreMenu[description]" placeholder="메뉴 설명을 입력해주세요." required></textarea>
                                <input class="form-control mb-3" name="repreMenuPhoto" type="file" required>
                            </div>
                            <div class="row mb-3 menuBackground">
                                <label class="form-label text-start">대표메뉴3</label>
                                <input class='menuName2 form-control mb-1' id="menuName" type="text" name="repreMenu[name]" style="margin-bottom: 3px;background-color: #edede9;" readonly required>
                                <label class="form-label text-start">가격</label>
                                <input class='form-control mb-3' id='price' placeholder = '₩' type="number" name="repreMenu[price]" style="margin-bottom: 3px;" required>
                                <textarea class="form-control mb-1" name="repreMenu[description]" placeholder="메뉴 설명을 입력해주세요." required></textarea>
                                <input  class="form-control mb-3" name="repreMenuPhoto" type="file" required>
                            </div>
                        </div>
                    </div>
                    <div class="card-body" style="padding-top:2px">
                        <button id="addMenuBtn"class ="btn btn-success" style="width: 3em; text-align: center;">+</button>
                        <button id="deleteMenuBtn"class ="btn btn-success" style="width: 3em; text-align: center;">-</button>
                     </div>  
                </li>
                    <li class="list-group-item">
                        <div id ="menus" class=" flex-column mb-3">
                        </div>
                        <h5>카페 사진</h5>
                        <input class="form-control" type="file" name="photos" multiple required>
                    </li>
                </ul>
                <div class="card-body">
                    <button class="btn btn-primary btn-sm mx-3">확인</button>
                    <button class="btn btn-secondary btn-sm mx-3">취소</button>
                </div>
                </form>
            </div>
        </div>
    </div>

<!--모달-->
<div class="modal fade" id="locationModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="exampleModalLabel">주소 검색</h1>
          <button id="closeModalBtn" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <form id="modalFrom" class="text-center">
                <input id="locationSearch" type="text">
                <button id="locationSearchBtn" type="button"  class="btn btn-primary">검색</button>
                <div id="locationSearchContainer" class="scroll-container" style="height: 200px; overflow: auto;">

                </div>
                  
            </form>
        </div>
        <div class="modal-footer">
          <button id="closeLocationBtn" type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
          <button id="saveLocationBtn" type="button" class="btn btn-primary" data-bs-dismiss="modal">저장</button>
        </div>
      </div>
    </div>
  </div>

  
    <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
    crossorigin="anonymous">
</script>
</body>
</html>

<script>
    const repMenuBtn = document.querySelector('#repMenuBtn')
    const repre0 = document.querySelector('#repre0')
    const repre1 = document.querySelector('#repre1')
    const repre2 = document.querySelector('#repre2')

    const menuName0 = document.querySelector('.menuName0')
    const menuName1 = document.querySelector('.menuName1')
    const menuName2 = document.querySelector('.menuName2')

    const addMenuBtn = document.querySelector('#addMenuBtn')
    const menus = document.querySelector('#menus')
    const deleteMenuBtn = document.querySelector('#deleteMenuBtn')
    const closeLocationBtn = document.querySelector('#closeLocationBtn')
    const closeModalBtn = document.querySelector('#closeModalBtn')

    const modalFrom = document.querySelector('#modalFrom');

    modalFrom.addEventListener('keydown', (evt)=>{
        if(evt.key == 'Enter'){
            evt.preventDefault();
        }
    })
    let inputCnt = 0;
    addMenuBtn.addEventListener('click', e=>{
        e.preventDefault();
        const newInput = document.createElement('input');
        const row = document.createElement('div');
        row.setAttribute('class', 'row mb-3 menuBackground');
        newInput.setAttribute('id', 'menuName');
        newInput.setAttribute('name', 'menu[name]');
        newInput.setAttribute('style', 'margin-bottom:3px');
        newInput.setAttribute('class', 'form-control mb-1');
        newInput.setAttribute('required', true);

        const priceInput = document.createElement('input');
        priceInput.setAttribute('type', 'number');
        priceInput.setAttribute('id', 'price');
        priceInput.setAttribute('placeholder', '₩');
        priceInput.setAttribute('name', 'menu[price]');
        priceInput.setAttribute('style', 'margin-bottom:3px');
        priceInput.setAttribute('class', 'form-control mb-3');
        priceInput.setAttribute('required', true);

        const textArea = document.createElement('textarea');
        textArea.setAttribute('name', 'menu[description]');
        textArea.setAttribute('placeholder', '메뉴 설명을 입력하세요.');
        textArea.setAttribute('class', 'form-control mb-1');
        textArea.setAttribute('required', true);

        const fileInput = document.createElement('input');
        fileInput.setAttribute('type', 'file');
        fileInput.setAttribute('class', 'form-control mb-3');
        fileInput.setAttribute('name', 'menuPhoto');
        fileInput.setAttribute('required', true);
        //<label for="inputPassword5" class="form-label">Password</label>

        const nameLabel = document.createElement('label');
        nameLabel.setAttribute('class', 'form-label text-start');
        nameLabel.innerHTML = "메뉴명";

        const priceLabel = document.createElement('label');
        priceLabel.setAttribute('class', 'form-label text-start');
        priceLabel.innerHTML = "가격";

        row.append(nameLabel);
        row.append(newInput);

        row.append(priceLabel);
        row.append(priceInput);
        row.append(textArea);
        row.append(fileInput);

        menus.append(row);

        inputCnt++;
    })

    deleteMenuBtn.addEventListener('click', e=>{
        e.preventDefault();
        if(inputCnt == 0){
            alert('대표 메뉴는 삭제할 수 없습니다. 대표메뉴 항목에서 재설정 해주세요.')
        }
        else{
            e.preventDefault();
            menus.removeChild(menus.lastChild)
            inputCnt--;
        }
    })

    repMenuBtn.addEventListener('click', e=>{
        e.preventDefault();
        menuName0.value = repre0.value;
        menuName1.value = repre1.value;
        menuName2.value = repre2.value;

    })
    /* map 처리 */

    let container = document.getElementById('map');
	let options = {
		center: new kakao.maps.LatLng(35.23278717517533, 129.082898448971),
		level: 3,
        draggable: true
	};

	let map = new kakao.maps.Map(container, options);
    let places = new kakao.maps.services.Places();
    map.setLevel(2);
    places.setMap(map);

    const markers = [];

    let clusterer = new kakao.maps.MarkerClusterer({
        map: map,
        markers: markers,
        gridSize: 35,
        averageCenter: true,
        minLevel: 6,
        disableClickZoom: true,
        styles: [{
            width : '53px', height : '52px',
            background: 'url(cluster.png) no-repeat',
            color: '#fff',
            textAlign: 'center',
            lineHeight: '54px'
        }]
    });

    /* location / map처리 */
    let locationTags = [];
    let locationObjectArr = [];
    let result_locationObject = {};
    
    const saveLocationBtn = document.querySelector('#saveLocationBtn');
    const locationSearchContainer = document.querySelector('#locationSearchContainer');
    const locationSearch = document.querySelector('#locationSearch');
    const locationSearchBtn = document.querySelector('#locationSearchBtn');
    const cafeNameInput = document.querySelector('#cafeNameInput');
    const cafeLocationInput = document.querySelector('#cafeLocationInput');

    const inputLatitude = document.querySelector('#inputLatitude');
    const inputlongitude = document.querySelector('#inputlongitude');

    function childIndex(child){
        const children = child.parentElement.children;
        let i = 0;
        for(i = 0; i < children.length; i++){
            if(children[i] == child){
                break;
            }
        }
        return i;
    }

    locationSearchBtn.addEventListener('click', async e=>{
        e.preventDefault();
        locationSearchContainer.innerHTML = '';
        var places = new kakao.maps.services.Places();
        var callback = await function(result, status) {
            locationObjectArr = [];
            locationTags = [];
            if (status === kakao.maps.services.Status.OK) {
                for(element of result){
                    let temp = document.createElement("div");
                    let tempObj = {
                        name : element.place_name,
                        location : element.road_address_name,
                        x : element.x,
                        y : element.y
                    };
                    locationObjectArr.push(tempObj);
                    temp.innerText = `${element.place_name} (${element.road_address_name})`;//태그 설정
                    temp.setAttribute('class', 'mb-1')
                    locationTags.push(temp);
                    locationSearchContainer.appendChild(temp);
                };
                locationTags.forEach(e=>{
                    e.addEventListener('click', evt=>{
                        result_locationObject =  locationObjectArr[childIndex(e)];
                        locationSearch.value = result_locationObject?result_locationObject.name:"";

                        clusterer.clear();
                        let marker = new kakao.maps.Marker({
                            position: new kakao.maps.LatLng(result_locationObject.y, result_locationObject.x)
                        });
                        map.setCenter(new kakao.maps.LatLng(result_locationObject.y , result_locationObject.x));
                        clusterer.addMarker(marker);
                    })

                    e.addEventListener('mouseenter', ()=>{
                        e.classList.add('hover_changeBg');
                    })

                    e.addEventListener('mouseleave', ()=>{
                        e.classList.remove('hover_changeBg');
                    })
                })
            }
        };
        places.keywordSearch(locationSearch.value, callback);
    })

    const resetModalInputs = ()=>{
        locationSearchContainer.innerHTML = '';
        locationSearch.value = '';
    }

    saveLocationBtn.addEventListener('click', e=>{
        e.preventDefault();
        cafeNameInput.value =  result_locationObject.name?result_locationObject.name:"";
        cafeLocationInput.value = result_locationObject.location?result_locationObject.location:"";
        inputLatitude.value = result_locationObject?result_locationObject.y:"";
        inputlongitude.value = result_locationObject?result_locationObject.x:"";
        resetModalInputs();
    })
    


    closeLocationBtn.addEventListener('click', ()=>{
        resetModalInputs();
    })

    closeModalBtn.addEventListener('click', ()=>{
        resetModalInputs();
    })


</script>
<script>
// Example starter JavaScript for disabling form submissions if there are invalid fields
(() => {
  'use strict'

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  const forms = document.querySelectorAll('.needs-validation')

  // Loop over them and prevent submission
  Array.from(forms).forEach(form => {
    form.addEventListener('submit', event => {
      if (!form.checkValidity()) {
        event.preventDefault()
        event.stopPropagation()
      }

      form.classList.add('was-validated')
    }, false)
  })
})()

</script>